
DIGITAL_I_O.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b3  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000395  00000000  00000000  0000102f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044a  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <set_pin_status>:
/************************************************************************/


void set_pin_status(u8_t au8_port, u8_t au8_pin ,u8_t au8_status)			 //this function is to set the pin  status to INPUT FLOAT,OUTPUT OR INPUT PULLUP.
{
	switch(au8_port)																		//to switch between PORTS.
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	f1 f0       	breq	.+60     	; 0xac <set_pin_status+0x40>
  70:	30 f0       	brcs	.+12     	; 0x7e <set_pin_status+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	91 f1       	breq	.+100    	; 0xda <set_pin_status+0x6e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <set_pin_status+0x10>
  7a:	46 c0       	rjmp	.+140    	; 0x108 <set_pin_status+0x9c>
  7c:	08 95       	ret
	{
		case PORTA:																			//if it was PORT A,SWITCH between the satus inside it.
		{
			switch(au8_status)																//SWITCHING between the status inside PORT A.
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	69 f0       	breq	.+26     	; 0x9c <set_pin_status+0x30>
  82:	40 f0       	brcs	.+16     	; 0x94 <set_pin_status+0x28>
  84:	42 30       	cpi	r20, 0x02	; 2
  86:	91 f4       	brne	.+36     	; 0xac <set_pin_status+0x40>
			{
				
				case INPUT_FLOAT:															//incase of INPUT FLOATING.
				{
					DIO_DDRA&= ~au8_pin;														//here, we set the PIN to 0
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	96 2f       	mov	r25, r22
  8c:	90 95       	com	r25
  8e:	89 23       	and	r24, r25
  90:	8a bb       	out	0x1a, r24	; 26
					
					break;																	//breaking from the case.								
  92:	0c c0       	rjmp	.+24     	; 0xac <set_pin_status+0x40>
				}
				
				case  OUTPUT:																//incase of OUTPUT.
				{
					DIO_DDRA|= au8_pin;															//here, we set the PIN to 1.
  94:	8a b3       	in	r24, 0x1a	; 26
  96:	86 2b       	or	r24, r22
  98:	8a bb       	out	0x1a, r24	; 26
					
					break;																	//breaking from the case.
  9a:	08 c0       	rjmp	.+16     	; 0xac <set_pin_status+0x40>
				}
				
				case INPUT_PULLUP:															//incase of INPUT PULLUP.
				{
					DIO_DDRA&=~au8_pin;															//here, we set the PIN to 0.
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	96 2f       	mov	r25, r22
  a0:	90 95       	com	r25
  a2:	89 23       	and	r24, r25
  a4:	8a bb       	out	0x1a, r24	; 26
					
					DIO_PORTA|=au8_pin;															//here, we set the PIN to 1.
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	86 2b       	or	r24, r22
  aa:	8b bb       	out	0x1b, r24	; 27
			
		}
		
		case PORTB:																			//if it was PORT B,SWITCH between the satus inside it.
		{
			switch(au8_status)																//SWITCHING between the status inside PORT B.
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	69 f0       	breq	.+26     	; 0xca <set_pin_status+0x5e>
  b0:	40 f0       	brcs	.+16     	; 0xc2 <set_pin_status+0x56>
  b2:	42 30       	cpi	r20, 0x02	; 2
  b4:	91 f4       	brne	.+36     	; 0xda <set_pin_status+0x6e>
			{
				
				case INPUT_FLOAT:															//incase of INPUT FLOATING.
				{
					DIO_DDRB&= ~au8_pin;														//here, we set the PIN to 0
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	96 2f       	mov	r25, r22
  ba:	90 95       	com	r25
  bc:	89 23       	and	r24, r25
  be:	87 bb       	out	0x17, r24	; 23
					
					break;																	//breaking from the case.
  c0:	0c c0       	rjmp	.+24     	; 0xda <set_pin_status+0x6e>
				}
				
				case  OUTPUT:																//incase of OUTPUT.
				{
					DIO_DDRB|= au8_pin;															//here, we set the PIN to 1.
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	86 2b       	or	r24, r22
  c6:	87 bb       	out	0x17, r24	; 23
					
					break;																	//breaking from the case.
  c8:	08 c0       	rjmp	.+16     	; 0xda <set_pin_status+0x6e>
				}
				
				case INPUT_PULLUP:															//incase of INPUT PULLUP.
				{
					DIO_DDRB&=~au8_pin;															//here, we set the PIN to 0.
  ca:	87 b3       	in	r24, 0x17	; 23
  cc:	96 2f       	mov	r25, r22
  ce:	90 95       	com	r25
  d0:	89 23       	and	r24, r25
  d2:	87 bb       	out	0x17, r24	; 23
					
					DIO_PORTB|=au8_pin;															//here, we set the PIN to 1.
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	86 2b       	or	r24, r22
  d8:	88 bb       	out	0x18, r24	; 24
			}
			
		}
		case PORTC:																			//if it was PORT C,SWITCH between the satus inside it.
		{
			switch(au8_status)																//SWITCHING between the status inside PORT C.
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	69 f0       	breq	.+26     	; 0xf8 <set_pin_status+0x8c>
  de:	40 f0       	brcs	.+16     	; 0xf0 <set_pin_status+0x84>
  e0:	42 30       	cpi	r20, 0x02	; 2
  e2:	91 f4       	brne	.+36     	; 0x108 <set_pin_status+0x9c>
			{
				
				case INPUT_FLOAT:															//incase of INPUT FLOATING.
				{
					DIO_DDRC&= ~au8_pin;														//here, we set the PIN to 0
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	96 2f       	mov	r25, r22
  e8:	90 95       	com	r25
  ea:	89 23       	and	r24, r25
  ec:	84 bb       	out	0x14, r24	; 20
					
					break;																	//breaking from the case.
  ee:	0c c0       	rjmp	.+24     	; 0x108 <set_pin_status+0x9c>
				}
				
				case  OUTPUT:																//incase of OUTPUT.
				{
					DIO_DDRC|= au8_pin;															//here, we set the PIN to 1.
  f0:	84 b3       	in	r24, 0x14	; 20
  f2:	86 2b       	or	r24, r22
  f4:	84 bb       	out	0x14, r24	; 20
					
					break;																	//breaking from the case.
  f6:	08 c0       	rjmp	.+16     	; 0x108 <set_pin_status+0x9c>
				}
				
				case INPUT_PULLUP:															//incase of INPUT PULLUP.
				{
					DIO_DDRC&=~au8_pin;															//here, we set the PIN to 0.
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	96 2f       	mov	r25, r22
  fc:	90 95       	com	r25
  fe:	89 23       	and	r24, r25
 100:	84 bb       	out	0x14, r24	; 20
					
					DIO_PORTC|=au8_pin;															//here, we set the PIN to 1.
 102:	85 b3       	in	r24, 0x15	; 21
 104:	86 2b       	or	r24, r22
 106:	85 bb       	out	0x15, r24	; 21
			}
			
		}
		case PORTD:																			//if it was PORT D,SWITCH between the satus inside it.
		{
			switch(au8_status)																//SWITCHING between the status inside PORT D.
 108:	41 30       	cpi	r20, 0x01	; 1
 10a:	61 f0       	breq	.+24     	; 0x124 <set_pin_status+0xb8>
 10c:	38 f0       	brcs	.+14     	; 0x11c <set_pin_status+0xb0>
 10e:	42 30       	cpi	r20, 0x02	; 2
 110:	89 f4       	brne	.+34     	; 0x134 <set_pin_status+0xc8>
			{
				
				case INPUT_FLOAT:															//incase of INPUT FLOATING.
				{
					DIO_DDRD&= ~au8_pin;														//here, we set the PIN to 0
 112:	81 b3       	in	r24, 0x11	; 17
 114:	60 95       	com	r22
 116:	68 23       	and	r22, r24
 118:	61 bb       	out	0x11, r22	; 17
					
					break;																	//breaking from the case.
 11a:	08 95       	ret
				}
				
				case  OUTPUT:																//incase of OUTPUT.
				{
					DIO_DDRD|= au8_pin;															//here, we set the PIN to 1.
 11c:	81 b3       	in	r24, 0x11	; 17
 11e:	68 2b       	or	r22, r24
 120:	61 bb       	out	0x11, r22	; 17
					
					break;																	//breaking from the case.
 122:	08 95       	ret
				}
				
				case INPUT_PULLUP:															//incase of INPUT PULLUP.
				{
					DIO_DDRD&=~au8_pin;															//here, we set the PIN to 0.
 124:	81 b3       	in	r24, 0x11	; 17
 126:	96 2f       	mov	r25, r22
 128:	90 95       	com	r25
 12a:	89 23       	and	r24, r25
 12c:	81 bb       	out	0x11, r24	; 17
					
					DIO_PORTD|=au8_pin;															//here, we set the PIN to 1.
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	68 2b       	or	r22, r24
 132:	62 bb       	out	0x12, r22	; 18
 134:	08 95       	ret

00000136 <set_pin_value>:
}


void set_pin_value(u8_t au8_port, u8_t au8_pin ,u8_t au8_value)			//this function is to set the pin  value to HIGH OR LOW.
{
	switch(au8_port)													//to switch between PORTS.
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	99 f0       	breq	.+38     	; 0x160 <set_pin_value+0x2a>
 13a:	28 f0       	brcs	.+10     	; 0x146 <set_pin_value+0x10>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	e9 f0       	breq	.+58     	; 0x17a <set_pin_value+0x44>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	41 f1       	breq	.+80     	; 0x194 <set_pin_value+0x5e>
 144:	08 95       	ret
	{
		case PORTA:														//incase of PORT A.
		{
			if(au8_value==HIGH)											//if the desired value is HIGH.
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	21 f4       	brne	.+8      	; 0x152 <set_pin_value+0x1c>
			{
				DIO_PORTA|=au8_pin;											//setting the PIN to 1.
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	68 2b       	or	r22, r24
 14e:	6b bb       	out	0x1b, r22	; 27
 150:	08 95       	ret
			}
			else if(au8_value==LOW)										//if the desired value is LOW.
 152:	41 11       	cpse	r20, r1
 154:	2b c0       	rjmp	.+86     	; 0x1ac <set_pin_value+0x76>
			{
				DIO_PORTA &= ~au8_pin;										//setting the PIN to 0.
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	60 95       	com	r22
 15a:	68 23       	and	r22, r24
 15c:	6b bb       	out	0x1b, r22	; 27
 15e:	08 95       	ret
			
			break;														//breaking from the case.
		}
		case PORTB:														//incase of PORT B.
		{
			if(au8_value==HIGH)											//if the desired value is HIGH.
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	21 f4       	brne	.+8      	; 0x16c <set_pin_value+0x36>
			{
				DIO_PORTB|=au8_pin;											//setting the PIN to 1.
 164:	88 b3       	in	r24, 0x18	; 24
 166:	68 2b       	or	r22, r24
 168:	68 bb       	out	0x18, r22	; 24
 16a:	08 95       	ret
			}
			else if(au8_value==LOW)										//if the desired value is LOW.
 16c:	41 11       	cpse	r20, r1
 16e:	1e c0       	rjmp	.+60     	; 0x1ac <set_pin_value+0x76>
			{
				DIO_PORTB&= ~au8_pin;										//setting the PIN to 0.
 170:	88 b3       	in	r24, 0x18	; 24
 172:	60 95       	com	r22
 174:	68 23       	and	r22, r24
 176:	68 bb       	out	0x18, r22	; 24
 178:	08 95       	ret
			
			break;														//breaking from the case.
		}
		case PORTC:														//incase of PORT C.
		{
			if(au8_value==HIGH)											//if the desired value is HIGH.
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	21 f4       	brne	.+8      	; 0x186 <set_pin_value+0x50>
			{
				DIO_PORTC|=au8_pin;											//setting the PIN to 1.
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	68 2b       	or	r22, r24
 182:	65 bb       	out	0x15, r22	; 21
 184:	08 95       	ret
			}
			else if(au8_value==LOW)										//if the desired value is LOW.
 186:	41 11       	cpse	r20, r1
 188:	11 c0       	rjmp	.+34     	; 0x1ac <set_pin_value+0x76>
			{
				DIO_PORTC&= ~au8_pin;										//setting the PIN to 0.
 18a:	85 b3       	in	r24, 0x15	; 21
 18c:	60 95       	com	r22
 18e:	68 23       	and	r22, r24
 190:	65 bb       	out	0x15, r22	; 21
 192:	08 95       	ret
			
			break;														//breaking from the case.
		}
		case PORTD:														//incase of PORT D.
		{
			if(au8_value==HIGH)											//if the desired value is HIGH.
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	21 f4       	brne	.+8      	; 0x1a0 <set_pin_value+0x6a>
			{
				DIO_PORTD|=au8_pin;											//setting the PIN to 1.
 198:	82 b3       	in	r24, 0x12	; 18
 19a:	68 2b       	or	r22, r24
 19c:	62 bb       	out	0x12, r22	; 18
 19e:	08 95       	ret
			}
			else if(au8_value==LOW)										//if the desired value is LOW.
 1a0:	41 11       	cpse	r20, r1
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <set_pin_value+0x76>
			{
				DIO_PORTD&= ~au8_pin;										//setting the PIN to 0.
 1a4:	82 b3       	in	r24, 0x12	; 18
 1a6:	60 95       	com	r22
 1a8:	68 23       	and	r22, r24
 1aa:	62 bb       	out	0x12, r22	; 18
 1ac:	08 95       	ret

000001ae <main>:
#include "lstd_types.h"
#include "DIO_NITERFACE.h"

int main(void)
{
	set_pin_status(PORTC,PIN0|PIN7,OUTPUT);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	61 e8       	ldi	r22, 0x81	; 129
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
	set_pin_value(PORTC,PIN0|PIN7,HIGH);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	61 e8       	ldi	r22, 0x81	; 129
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 9b 00 	call	0x136	; 0x136 <set_pin_value>
	set_pin_status(PORTB,PIN1,OUTPUT);
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
	set_pin_value(PORTB,PIN1,HIGH);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 9b 00 	call	0x136	; 0x136 <set_pin_value>
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <main+0x28>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
