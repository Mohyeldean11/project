
final_m_controller1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5a  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000079a  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000551  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000083d  00000000  00000000  00002669  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002ea6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  64:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <set_pin_status>:
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	f9 f0       	breq	.+62     	; 0xae <set_pin_status+0x42>
  70:	30 f0       	brcs	.+12     	; 0x7e <set_pin_status+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	a1 f1       	breq	.+104    	; 0xde <set_pin_status+0x72>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <set_pin_status+0x10>
  7a:	49 c0       	rjmp	.+146    	; 0x10e <set_pin_status+0xa2>
  7c:	08 95       	ret
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	21 f0       	breq	.+8      	; 0x8a <set_pin_status+0x1e>
  82:	40 f0       	brcs	.+16     	; 0x94 <set_pin_status+0x28>
  84:	42 30       	cpi	r20, 0x02	; 2
  86:	51 f0       	breq	.+20     	; 0x9c <set_pin_status+0x30>
  88:	08 95       	ret
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	60 95       	com	r22
  8e:	68 23       	and	r22, r24
  90:	6a bb       	out	0x1a, r22	; 26
  92:	08 95       	ret
  94:	8a b3       	in	r24, 0x1a	; 26
  96:	68 2b       	or	r22, r24
  98:	6a bb       	out	0x1a, r22	; 26
  9a:	08 95       	ret
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	96 2f       	mov	r25, r22
  a0:	90 95       	com	r25
  a2:	89 23       	and	r24, r25
  a4:	8a bb       	out	0x1a, r24	; 26
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	68 2b       	or	r22, r24
  aa:	6b bb       	out	0x1b, r22	; 27
  ac:	08 95       	ret
  ae:	41 30       	cpi	r20, 0x01	; 1
  b0:	21 f0       	breq	.+8      	; 0xba <set_pin_status+0x4e>
  b2:	40 f0       	brcs	.+16     	; 0xc4 <set_pin_status+0x58>
  b4:	42 30       	cpi	r20, 0x02	; 2
  b6:	51 f0       	breq	.+20     	; 0xcc <set_pin_status+0x60>
  b8:	08 95       	ret
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	60 95       	com	r22
  be:	68 23       	and	r22, r24
  c0:	67 bb       	out	0x17, r22	; 23
  c2:	08 95       	ret
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	68 2b       	or	r22, r24
  c8:	67 bb       	out	0x17, r22	; 23
  ca:	08 95       	ret
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	96 2f       	mov	r25, r22
  d0:	90 95       	com	r25
  d2:	89 23       	and	r24, r25
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	68 2b       	or	r22, r24
  da:	68 bb       	out	0x18, r22	; 24
  dc:	08 95       	ret
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	21 f0       	breq	.+8      	; 0xea <set_pin_status+0x7e>
  e2:	40 f0       	brcs	.+16     	; 0xf4 <set_pin_status+0x88>
  e4:	42 30       	cpi	r20, 0x02	; 2
  e6:	51 f0       	breq	.+20     	; 0xfc <set_pin_status+0x90>
  e8:	08 95       	ret
  ea:	84 b3       	in	r24, 0x14	; 20
  ec:	60 95       	com	r22
  ee:	68 23       	and	r22, r24
  f0:	64 bb       	out	0x14, r22	; 20
  f2:	08 95       	ret
  f4:	84 b3       	in	r24, 0x14	; 20
  f6:	68 2b       	or	r22, r24
  f8:	64 bb       	out	0x14, r22	; 20
  fa:	08 95       	ret
  fc:	84 b3       	in	r24, 0x14	; 20
  fe:	96 2f       	mov	r25, r22
 100:	90 95       	com	r25
 102:	89 23       	and	r24, r25
 104:	84 bb       	out	0x14, r24	; 20
 106:	85 b3       	in	r24, 0x15	; 21
 108:	68 2b       	or	r22, r24
 10a:	65 bb       	out	0x15, r22	; 21
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	21 f0       	breq	.+8      	; 0x11a <set_pin_status+0xae>
 112:	40 f0       	brcs	.+16     	; 0x124 <set_pin_status+0xb8>
 114:	42 30       	cpi	r20, 0x02	; 2
 116:	51 f0       	breq	.+20     	; 0x12c <set_pin_status+0xc0>
 118:	08 95       	ret
 11a:	81 b3       	in	r24, 0x11	; 17
 11c:	60 95       	com	r22
 11e:	68 23       	and	r22, r24
 120:	61 bb       	out	0x11, r22	; 17
 122:	08 95       	ret
 124:	81 b3       	in	r24, 0x11	; 17
 126:	68 2b       	or	r22, r24
 128:	61 bb       	out	0x11, r22	; 17
 12a:	08 95       	ret
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	96 2f       	mov	r25, r22
 130:	90 95       	com	r25
 132:	89 23       	and	r24, r25
 134:	81 bb       	out	0x11, r24	; 17
 136:	82 b3       	in	r24, 0x12	; 18
 138:	68 2b       	or	r22, r24
 13a:	62 bb       	out	0x12, r22	; 18
 13c:	08 95       	ret

0000013e <set_pin_value>:
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	99 f0       	breq	.+38     	; 0x168 <set_pin_value+0x2a>
 142:	28 f0       	brcs	.+10     	; 0x14e <set_pin_value+0x10>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	e9 f0       	breq	.+58     	; 0x182 <set_pin_value+0x44>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	41 f1       	breq	.+80     	; 0x19c <set_pin_value+0x5e>
 14c:	08 95       	ret
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	21 f4       	brne	.+8      	; 0x15a <set_pin_value+0x1c>
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	68 2b       	or	r22, r24
 156:	6b bb       	out	0x1b, r22	; 27
 158:	08 95       	ret
 15a:	41 11       	cpse	r20, r1
 15c:	2b c0       	rjmp	.+86     	; 0x1b4 <set_pin_value+0x76>
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	60 95       	com	r22
 162:	68 23       	and	r22, r24
 164:	6b bb       	out	0x1b, r22	; 27
 166:	08 95       	ret
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	21 f4       	brne	.+8      	; 0x174 <set_pin_value+0x36>
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	68 2b       	or	r22, r24
 170:	68 bb       	out	0x18, r22	; 24
 172:	08 95       	ret
 174:	41 11       	cpse	r20, r1
 176:	1e c0       	rjmp	.+60     	; 0x1b4 <set_pin_value+0x76>
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	60 95       	com	r22
 17c:	68 23       	and	r22, r24
 17e:	68 bb       	out	0x18, r22	; 24
 180:	08 95       	ret
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	21 f4       	brne	.+8      	; 0x18e <set_pin_value+0x50>
 186:	85 b3       	in	r24, 0x15	; 21
 188:	68 2b       	or	r22, r24
 18a:	65 bb       	out	0x15, r22	; 21
 18c:	08 95       	ret
 18e:	41 11       	cpse	r20, r1
 190:	11 c0       	rjmp	.+34     	; 0x1b4 <set_pin_value+0x76>
 192:	85 b3       	in	r24, 0x15	; 21
 194:	60 95       	com	r22
 196:	68 23       	and	r22, r24
 198:	65 bb       	out	0x15, r22	; 21
 19a:	08 95       	ret
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	21 f4       	brne	.+8      	; 0x1a8 <set_pin_value+0x6a>
 1a0:	82 b3       	in	r24, 0x12	; 18
 1a2:	68 2b       	or	r22, r24
 1a4:	62 bb       	out	0x12, r22	; 18
 1a6:	08 95       	ret
 1a8:	41 11       	cpse	r20, r1
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <set_pin_value+0x76>
 1ac:	82 b3       	in	r24, 0x12	; 18
 1ae:	60 95       	com	r22
 1b0:	68 23       	and	r22, r24
 1b2:	62 bb       	out	0x12, r22	; 18
 1b4:	08 95       	ret

000001b6 <main>:
#include "UART_INTERFACE.h"
#include "SPI_interface.h"
#define F_CPU	16000000
#include "util/delay.h"
int main(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <main+0x6>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
   /*VARIABLE TO RECEIVE DATA from SLAVE*/
   u8_t y;
   
   
   /*setting the UART PINS*/
   set_pin_status(PORTD,PIN0,INPUT_FLOAT);
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
   set_pin_status(PORTD,PIN1,OUTPUT);
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
   
   
   /*setting the SPI PINS*/
   set_pin_status(PORTA,PIN0,OUTPUT);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
   set_pin_status(PORTB,PIN5,OUTPUT);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	60 e2       	ldi	r22, 0x20	; 32
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
   set_pin_status(PORTB,PIN6,INPUT_FLOAT);
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	60 e4       	ldi	r22, 0x40	; 64
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
   set_pin_status(PORTB,PIN7,OUTPUT);
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	60 e8       	ldi	r22, 0x80	; 128
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 36 00 	call	0x6c	; 0x6c <set_pin_status>
 
   /*initializing the UART*/
   UART_INIT(BAUD_RATE_9600);
 1fc:	87 e6       	ldi	r24, 0x67	; 103
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 49 01 	call	0x292	; 0x292 <UART_INIT>
   
   
   /*initializing the SPI*/
   spi_init(SPI_MASTER_DEVICE,SPI_MSB_FIRST,SPI_SAMPLE_F_SETUP_R,SPI_CLK_PRE_64);
 204:	25 e0       	ldi	r18, 0x05	; 5
 206:	42 e0       	ldi	r20, 0x02	; 2
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	0e 94 23 01 	call	0x246	; 0x246 <spi_init>
   
   
   while(1)
   {
	   /*receiving the information from the UART*/
	   UART_RECEIVE_DATA(&x);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_RECEIVE_DATA>

	 
		set_pin_value(PORTA,PIN0,LOW);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 9f 00 	call	0x13e	; 0x13e <set_pin_value>
		/*sending the value to the slave m_controller2*/
	   spi_masterSendRecv(x,&y);
 222:	be 01       	movw	r22, r28
 224:	6e 5f       	subi	r22, 0xFE	; 254
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	0e 94 39 01 	call	0x272	; 0x272 <spi_masterSendRecv>
	   set_pin_value(PORTA,PIN0,HIGH);
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 9f 00 	call	0x13e	; 0x13e <set_pin_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9c e9       	ldi	r25, 0x9C	; 156
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x86>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x8c>
 242:	00 00       	nop
 244:	e5 cf       	rjmp	.-54     	; 0x210 <main+0x5a>

00000246 <spi_init>:
/************************************************************************/

void spi_init(u8_t au8_spiDevType, u8_t au8_dataOrder, u8_t au8_dataTransfer_clkType, u8_t au8_clkFrequency)				//This function is used to initialize the control register and set the SPI to send or recieve.
{

    SPI_SPCR = 0;																											//Reseting the SPCR register.
 246:	1d b8       	out	0x0d, r1	; 13
   
    if( (au8_clkFrequency % 2) == 0 )																						//Checking the clk value to enable double speed or to not it.
 248:	20 fd       	sbrc	r18, 0
 24a:	04 c0       	rjmp	.+8      	; 0x254 <spi_init+0xe>
    {
	
	    SET_BIT(SPI_SPSR, 0);																								//Enable double speed.
 24c:	9e b1       	in	r25, 0x0e	; 14
 24e:	91 60       	ori	r25, 0x01	; 1
 250:	9e b9       	out	0x0e, r25	; 14
 252:	03 c0       	rjmp	.+6      	; 0x25a <spi_init+0x14>
    }	
    else
    {
		
        CLEAR_BIT(SPI_SPSR, 0);																						   //Disable double speed.
 254:	9e b1       	in	r25, 0x0e	; 14
 256:	9e 7f       	andi	r25, 0xFE	; 254
 258:	9e b9       	out	0x0e, r25	; 14
    }

    SPI_SPCR = (1<<6)|au8_spiDevType | au8_dataOrder | (au8_dataTransfer_clkType << 2) | (au8_clkFrequency / 2);					//Setting the SPCR register parameters.
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	68 2b       	or	r22, r24
 266:	46 2b       	or	r20, r22
 268:	26 95       	lsr	r18
 26a:	24 2b       	or	r18, r20
 26c:	20 64       	ori	r18, 0x40	; 64
 26e:	2d b9       	out	0x0d, r18	; 13
 270:	08 95       	ret

00000272 <spi_masterSendRecv>:

void spi_masterSendRecv(u8_t au8_sendData, u8_t* au8_recvData)																//This function is used to send data from master and receive data from slave.
{
    u8_t au8_timeOut = 0;																									 //A variable to time out mechanism.
    
    SPI_SPDR = au8_sendData;																								 //Setting the master data that will be sent.
 272:	8f b9       	out	0x0f, r24	; 15
    return;
}

void spi_masterSendRecv(u8_t au8_sendData, u8_t* au8_recvData)																//This function is used to send data from master and receive data from slave.
{
    u8_t au8_timeOut = 0;																									 //A variable to time out mechanism.
 274:	80 e0       	ldi	r24, 0x00	; 0
    
    SPI_SPDR = au8_sendData;																								 //Setting the master data that will be sent.
    
    while( (GET_BIT(SPI_SPSR, 7) == 0) && (au8_timeOut < TIMEOUT_VALUE) )													//Wait until the SPI flag rises.											
 276:	05 c0       	rjmp	.+10     	; 0x282 <spi_masterSendRecv+0x10>
    {
        au8_timeOut++;																										//Increasing the timeout variable by one every one loop.
 278:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	95 e0       	ldi	r25, 0x05	; 5
 27c:	9a 95       	dec	r25
 27e:	f1 f7       	brne	.-4      	; 0x27c <spi_masterSendRecv+0xa>
 280:	00 00       	nop
{
    u8_t au8_timeOut = 0;																									 //A variable to time out mechanism.
    
    SPI_SPDR = au8_sendData;																								 //Setting the master data that will be sent.
    
    while( (GET_BIT(SPI_SPSR, 7) == 0) && (au8_timeOut < TIMEOUT_VALUE) )													//Wait until the SPI flag rises.											
 282:	77 99       	sbic	0x0e, 7	; 14
 284:	02 c0       	rjmp	.+4      	; 0x28a <spi_masterSendRecv+0x18>
 286:	84 36       	cpi	r24, 0x64	; 100
 288:	b8 f3       	brcs	.-18     	; 0x278 <spi_masterSendRecv+0x6>
		
        _delay_us(1);																										//Wait for 1 microsecond.
    }
    
    
    *au8_recvData = SPI_SPDR;																								//Getting the received data from the slave.																								
 28a:	8f b1       	in	r24, 0x0f	; 15
 28c:	fb 01       	movw	r30, r22
 28e:	80 83       	st	Z, r24
 290:	08 95       	ret

00000292 <UART_INIT>:
 292:	1b b8       	out	0x0b, r1	; 11
 294:	28 e1       	ldi	r18, 0x18	; 24
 296:	2a b9       	out	0x0a, r18	; 10
 298:	26 e8       	ldi	r18, 0x86	; 134
 29a:	20 bd       	out	0x20, r18	; 32
 29c:	89 b9       	out	0x09, r24	; 9
 29e:	90 bd       	out	0x20, r25	; 32
 2a0:	08 95       	ret

000002a2 <UART_RECEIVE_DATA>:
 2a2:	5f 9b       	sbis	0x0b, 7	; 11
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <UART_RECEIVE_DATA+0xa>
 2a6:	2c b1       	in	r18, 0x0c	; 12
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
